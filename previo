from multiprocessing import Process
from multiprocessing import BoundedSemaphore, Semaphore, Lock
from multiprocessing import current_process
from multiprocessing import Value, Array
from time import sleep
import random


N = 5 #cuantos numeros generan
K = 3 #tamaño de las listas
NPROD = 3 #numero de productores




#añade un elemento a la lista
#igual es buena idea usar el pid para acceder al indice y data 
#de cada proceso guardados en una lista

        
def get_data(storage,index,cota,non_empty):
    
    try:
        storage[index]=-2
        cota.release()
        non_empty.acquire
    finally:
        pass
    
def add_data(array, data, index, cota, non_empty):
    try:
        cota.acquire() 
        array[index] = data 
        non_empty.release()   
        delay(6)
    finally:  
        pass

        

        
def min_indice(lst):
    minimo = min(lst)
    indice = lst.index(minimo)    
    return (indice, minimo)
  

def delay(factor = 3):
    sleep(random.random()/factor)



def producer(array, cota, non_empty):
    print(3)
    data=0
    index=0
    for _ in range(N):
        print (f"producer {current_process().name} soy {index}")
        
        cota.acquire()

        data= data+ random.randint(0,5)
        
        
        add_data(array, data, index, cota, non_empty)
        
        non_empty.release()
        
        index= (index + 1)%K
        
    data= -1
    add_data(array, data, index, cota, non_empty)
    index= (index+1) % K 
    

# Esto va a ser el merge
def consumer_merge(storage,ordenada, cota_lst, non_empty_lst):
    
    primer_elem=[None]*NPROD
    index_cons = [0]*NPROD
   
    while True:
        for non_empty in non_empty_lst:
            non_empty.acquire()
            non_empty.release()
        c=0
        
        for array in storage:
            indice=index_cons[c]
            elemento=array[indice]
            if elemento != -1:
                primer_elem[c]=elemento
            else:
                primer_elem[c]=float('inf')
            c+=1
        
        if primer_elem == [float('inf') for _ in range(NPROD)]:
            break    

        (i,minimo)=min_indice(primer_elem)
        
        ordenada.append(minimo)
        
        indice=index_cons[i]
        
        get_data(storage[i], indice , cota_lst[i],non_empty[i])
        
        index_cons[i]=(index_cons[i]+1)%K


        
        print (f"consumer {current_process().name} ordenando {ordenada}")
        delay()

def main():
    storage=[Array("i",K) for _ in range(NPROD)]
    ordenada= []
    
    
    
    for lista in storage:
        for i in range(K):
            lista[i]=-2
        
    
    non_empty_lst= [Semaphore(0) for _ in range(NPROD)]

    cota_lst= [BoundedSemaphore(K) for _ in range(NPROD)]

    
    

    prodlst = [ Process(target=producer,
                        name=f'prod_{i}',
                        args=(storage[i], cota_lst[i], non_empty_lst[i]))
                for i in range(NPROD) ]

    conslst = [ Process(target=consumer_merge,
                      name="cons",
                      args=(storage,ordenada,  cota_lst, non_empty_lst))]
    print(1)
    for p in prodlst + conslst:
        p.start()
    print(2)
    for p in prodlst + conslst:
        p.join()


if __name__ == '__main__':
    main()
